#!/usr/bin/env bash

# export CLINT_FORCE_COLOR=1
# export PIPENV_FORCE_COLOR=1
# shellcheck source=bin/utils
source "$BIN_DIR/utils"
set -e
PYTHON_APP_DIR="$(cat "$ENV_DIR/PYTHON_APP_DIR")"
export PIP_NO_BINARY=psycopg2

if [[ -f $PYTHON_APP_DIR/Pipfile.lock ]]; then
    if [[ -f .heroku/python/Pipfile.lock.sha256 ]]; then
        if [[ $(openssl dgst -sha256 $PYTHON_APP_DIR/Pipfile.lock) == $(cat .heroku/python/Pipfile.lock.sha256) ]]; then
            # Measure that we're using Pipenv.
            mcount "tool.pipenv"

            # Don't skip installation of there are git deps.
            if ! grep -q 'git' $PYTHON_APP_DIR/Pipfile.lock; then
                echo "Skipping installation, as $PYTHON_APP_DIR/Pipfile.lock hasn't changed since last deploy." | indent

                mcount "tool.pipenv"
                export SKIP_PIPENV_INSTALL=1
                export SKIP_PIP_INSTALL=1
            fi

        fi
    fi
fi


if [ ! "$SKIP_PIPENV_INSTALL" ]; then
    # Pipenv support (Generate requriements.txt with pipenv).
    if [[ -f $PYTHON_APP_DIR/Pipfile ]]; then
        # Measure that we're using Pipenv.
        mcount "tool.pipenv"

        # Skip pip install, later.
        export SKIP_PIP_INSTALL=1

        # Set PIP_EXTRA_INDEX_URL
        if [[ -r $ENV_DIR/PIP_EXTRA_INDEX_URL ]]; then
            PIP_EXTRA_INDEX_URL="$(cat "$ENV_DIR/PIP_EXTRA_INDEX_URL")"
            export PIP_EXTRA_INDEX_URL
        fi

        export PIPENV_VERSION="2018.5.18"

        # Install pipenv.
        /app/.heroku/python/bin/pip install pipenv==$PIPENV_VERSION --upgrade &> /dev/null

        # Install the dependencies.
        if [[ ! -f $PYTHON_APP_DIR/Pipfile.lock ]]; then
            puts-step "1Installing dependencies with Pipenv $PIPENV_VERSION…"
            cd $PYTHON_APP_DIR
            /app/.heroku/python/bin/pipenv install --system --skip-lock 2>&1 | indent
            /app/.heroku/python/bin/pipenv install psycopg2
            cd -
        else
            pipenv-to-pip $PYTHON_APP_DIR/Pipfile.lock > requirements.txt
            "$BIN_DIR/steps/pip-uninstall"
            cp requirements.txt .heroku/python/requirements-declared.txt
            openssl dgst -sha256 $PYTHON_APP_DIR/Pipfile.lock > .heroku/python/Pipfile.lock.sha256

            puts-step "2Installing dependencies with Pipenv $PIPENV_VERSION…"
            cd $PYTHON_APP_DIR
            /app/.heroku/python/bin/pipenv install --system --deploy 2>&1 | indent
            cd -
        fi

        # Install the test dependencies, for CI.
        if [ "$INSTALL_TEST" ]; then
            puts-step "Installing test dependencies…"
            cd $PYTHON_APP_DIR
            /app/.heroku/python/bin/pipenv install --dev --system --deploy 2>&1 | cleanup | indent
            cd -
        fi
    fi
else
    export SKIP_PIP_INSTALL=1
    pipenv-to-pip $PYTHON_APP_DIR/Pipfile.lock > requirements.txt
fi
